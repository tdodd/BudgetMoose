"use strict";var budgetMoose=angular.module("budgetMoose",["ngRoute"]).config(["$routeProvider","$locationProvider",function(e,o){o.html5Mode(!0),e.when("/",{template:"<root></root>"}).when("/budget",{template:"<income></income>"}).otherwise({redirectTo:"/"})}]);
"use strict";budgetMoose.component("budget",{templateUrl:"/app/budget/budget.html",bindings:{netIncome:"<"},controller:["$scope",function(e){e.savings=0,e.netIncome=0,e.expenses=[],e.invalidExpense=!1,this.$onInit=function(){e.netIncome=Math.round(this.netIncome/12),e.savings=Math.round(this.netIncome/12)},this.$onChanges=function(n){e.netIncome=Math.round(n.netIncome.currentValue/12),e.updateSavings()},e.addExpense=function(n,t){e.validateExpense(n,t)?(e.expenses.push({name:n,value:parseInt(t)}),e.savings-=t):(e.invalidExpense=!0,setTimeout(function(){e.invalidExpense=!1},2e3))},e.validateExpense=function(e,n){return"string"==typeof e&&(!isNaN(parseInt(n))&&(0!==e.length&&0!==n.length))},e.updateSavings=function(){if(e.savings=Math.round(this.netIncome),e.expenses.length>0){var n=!0,t=!1,s=void 0;try{for(var i,a=e.expenses[Symbol.iterator]();!(n=(i=a.next()).done);n=!0)expense=i.value,e.savings-=expense.value}catch(e){t=!0,s=e}finally{try{!n&&a.return&&a.return()}finally{if(t)throw s}}}}}]});
"use strict";
"use strict";budgetMoose.component("income",{templateUrl:"/app/income/income.html",controller:["$scope",function(T){T.salary,T.taxesPaid=0,T.validSalary=!0,T.netIncome=0,T.taxBracket=0,T.calcIncome=function(R){T.validateSalary(R)?(T.taxBracket=T.getTaxBracket(R),T.netIncome=Math.round(T.getNetIncome(R)),T.taxesPaid=Math.round(R-T.netIncome)):T.validSalary=!1},T.validateSalary=function(T){return"number"==typeof parseInt(T)&&T.length>3},T.getTaxBracket=function(T){return T<FIRST_BRACKET?1:T>=FIRST_BRACKET&&T<SECOND_BRACKET?2:T>=SECOND_BRACKET&&T<THIRD_BRACKET?3:T>=THIRD_BRACKET&&T<FOURTH_BRACKET?4:5},T.getNetIncome=function(R){var e=T.getTaxBracket(R),A=R;return 1===e?A-=R*FIRST_TAX:2===e?(A-=FIRST_BRACKET*FIRST_TAX,A-=(R-FIRST_BRACKET)*SECOND_TAX):3===e?(A-=FIRST_BRACKET*FIRST_TAX,A-=(SECOND_BRACKET-FIRST_BRACKET)*SECOND_TAX,A-=(R-SECOND_BRACKET)*THIRD_TAX):4===e?(A-=FIRST_BRACKET*FIRST_TAX,A-=(SECOND_BRACKET-FIRST_BRACKET)*SECOND_TAX,A-=(THIRD_BRACKET-SECOND_BRACKET)*THIRD_TAX,A-=(R-THIRD_BRACKET)*FOURTH_TAX):(A-=FIRST_BRACKET*FIRST_TAX,A-=(SECOND_BRACKET-FIRST_BRACKET)*SECOND_TAX,A-=(THIRD_BRACKET-SECOND_BRACKET)*THIRD_TAX,A-=(FOURTH_BRACKET-THIRD_BRACKET)*FOURTH_TAX,A-=(R-FOURTH_BRACKET)*FIFTH_TAX),A-=A*CPP_TAX}}]});
"use strict";
"use strict";budgetMoose.component("root",{templateUrl:"/app/root/root.html",controller:["$scope",function(o){}]});
"use strict";budgetMoose.component("tax",{templateUrl:"/app/tax/tax.html",bindings:{taxBracket:"<",taxesPaid:"<",netIncome:"<"},controller:["$scope",function(t){this.$onInit=function(){t.netIncome=this.netIncome,t.taxBracket=this.taxBracket,t.taxesPaid=this.taxesPaid},this.$onChanges=function(e){t.netIncome=e.netIncome.currentValue,t.taxBracket=e.taxBracket.currentValue,t.taxesPaid=e.taxesPaid.currentValue}}]});
"use strict";var FIRST_BRACKET=45916,SECOND_BRACKET=91831,THIRD_BRACKET=142353,FOURTH_BRACKET=202800,FIRST_TAX=.15,SECOND_TAX=.205,THIRD_TAX=.26,FOURTH_TAX=.29,FIFTH_TAX=.33,CPP_TAX=.0495;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
